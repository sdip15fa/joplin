# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Docker.gitlab-ci.yml

# Build a Docker image with CI/CD and push to the GitLab registry.
# Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#
# This template uses one generic job with conditional builds
# for the default branch and all other (MR) branches.

docker-build-server:
  # Use the official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - apk add nodejs
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - version=$(node -e "console.log(JSON.parse(require(\"fs\").readFileSync(\"packages/server/package.json\")).version)")
    - docker build -f Dockerfile.server --pull -t "$CI_REGISTRY_IMAGE/server${tag}" -t "$DOCKER_USER/joplin-server${tag}" -t "${CI_REGISTRY_IMAGE}/server:${version}" -t "$DOCKER_USER/joplin-server:${version}" .
    - docker push "$CI_REGISTRY_IMAGE/server${tag}"
    - docker push "$DOCKER_USER/joplin-server${tag}"
    - docker push "${CI_REGISTRY_IMAGE}/server:${version}"
    - docker push "$DOCKER_USER/joplin-server:${version}"
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" && $PULL != "true"
      exists:
        - Dockerfile.server
      changes:
        - packages/server/**/*
        - Dockerfile.server

publish:
  image: node:latest
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME =~ /^v\d+\.\d+\.\d+.*$/
      changes:
        - packages/lib/package.json
  script:
    # If no .npmrc is included in the repo, generate a temporary one that is configured to publish to GitLab's NPM registry
    - cd packages/lib
    - |
      if [[ ! -f .npmrc ]]; then
        echo 'No .npmrc found! Creating one now. Please review the following link for more information: https://docs.gitlab.com/ee/user/packages/npm_registry/index.html#project-level-npm-endpoint-1'
        {
          echo "@${CI_PROJECT_ROOT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/"
          echo "${CI_API_V4_URL#http*:}/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=\${CI_JOB_TOKEN}"
        } >> .npmrc
      fi
    - echo "Created the following .npmrc:"; cat .npmrc

    # Extract a few values from package.json
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")

    # Validate that the package name is properly scoped to the project's root namespace.
    # For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention
    - |
      if [[ ! $NPM_PACKAGE_NAME =~ ^@$CI_PROJECT_ROOT_NAMESPACE/ ]]; then
        echo "Invalid package scope! Packages must be scoped in the root namespace of the project, e.g. \"@${CI_PROJECT_ROOT_NAMESPACE}/${CI_PROJECT_NAME}\""
        echo 'For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention'
        exit 1
      fi

    # Compare the version in package.json to all published versions.
    # If the package.json version has not yet been published, run `npm publish`.
    - |
      if [[ $(npm view "${NPM_PACKAGE_NAME}" versions) != *"'${NPM_PACKAGE_VERSION}'"* ]]; then
        npm publish
        echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to GitLab's NPM registry: ${CI_PROJECT_URL}/-/packages"
      else
        echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has already been published, so no new version has been published."
      fi

pull:
  image: alpine:latest
  before_script:
    - apk add git
    - git checkout dev
    - git remote set-url origin https://wcyat:$gitlab_token@gitlab.com/wcyat/joplin
    - git remote add joplin https://github.com/laurent22/joplin
    - git config --global user.email "bot@wcyat.me"
    - git config --global user.name "wcyat-bot"
    - git config pull.rebase false
    - git pull origin dev
  script:
    - |
      git fetch joplin
      git merge -X theirs joplin/dev -m "Pull upstream" --allow-unrelated-histories
      git push origin --all
  rules:
    - if: $PULL == "true"
